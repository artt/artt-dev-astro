---
import { getCollection, render } from 'astro:content';
import MarkdownPostLayout from '@/layouts/MarkdownPostLayout.astro';
import Link from '@/components/Link.astro';

import { generateStaticPathFromEntry } from '@/lib/mdxUtils';
import Album from '@/components/Album/Album.astro';
import ZoomableImage from '@/components/ZoomableImage.astro';
import Plotter from '@/components/Plotter/Plotter.astro';

import { Tweet, YouTube } from 'astro-embed';
import FigNote from '@/components/FigNote.astro';

export async function getStaticPaths() {

  const blogEntries = await getCollection('blog')
  const pageEntries = await getCollection('pages')

  const allDynamicMdxPaths: any[] = []
  
  blogEntries.forEach((entry: Awaited<ReturnType<typeof getCollection>>[number]) => {
    console.log(entry)
    allDynamicMdxPaths.push(...generateStaticPathFromEntry(entry, '/blog'))
  })

  pageEntries.forEach((entry: Awaited<ReturnType<typeof getCollection>>[number]) => {
    allDynamicMdxPaths.push(...generateStaticPathFromEntry(entry, ''))
  })

  return allDynamicMdxPaths

}

const { entry, mainSlug, isBilingual, redirect } = Astro.props

if (redirect) {
  return Astro.redirect(redirect)
}
const { Content, headings } = await render(entry)

---
<MarkdownPostLayout frontmatter={entry.data} headings={headings} mainSlug={mainSlug} isBilingual={isBilingual}>
  <Content
    components={{
      h1: "h2",
      h2: "h3",
      h3: "h4",
      h4: "h5",
      h5: "h6",
      a: Link,
      Album,
      Plotter,
      img: ZoomableImage,
      Tweet,
      YouTube,
      fignote: FigNote,
    }}
  />
</MarkdownPostLayout>
<script async is:inline src="https://platform.twitter.com/widgets.js"></script>
