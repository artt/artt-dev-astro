---
const { title } = Astro.props;
---

<style lang="scss" is:global>
  #component-sidenav {
    --time-transition: 1s;
    opacity: 0;
    transition: opacity var(--time-transition);
  }
  #component-sidenav > a {
    --color-item: color-mix(in srgb, var(--color-heading), rgba(0, 0, 0, 0) 30%);
    &.active {
      --color-item: var(--color-secondary);
    }
  }
  #component-sidenav > a {
    padding: 0.1rem 0;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    display: block;
    color: var(--color-item);
    transition: color var(--time-transition);
    filter: none;
    position: relative;
    &:not(.active):hover {
      --color-item: var(--color-heading);
    }
    &:not(:first-child)::before {
      content: '';
      position: absolute;
      width: 1px;
      height: 100%;
      left: 0;
      top: 0;
      background-color: var(--color-item);
      transition: width var(--time-transition);
    }
    &.active::before {
      width: 4px;
    }
  }
  #component-sidenav > a:first-child {
    color: var(--color-secondary);
  }
</style>

<script>

  type HeadingPosition = {
    top: number;
    id: string;
    element: HTMLElement;
  }
  let headings: HeadingPosition[] = []

  document.addEventListener(
    'astro:page-load',
    () => {
      setTimeout(() => {
        updateHeaderPositions()
        updateScrollPosition()
        // set --time-transition in #component-sidenav to 0.1s
        const sidenav = document.getElementById('component-sidenav')
        if (sidenav) {
          setTimeout(() => {
            sidenav.style.setProperty('--time-transition', '0.1s')
          }, 500)
        }
      }, 1000)
      const x = document.querySelectorAll("#content h2, #content h3")
      const sidenav = document.getElementById('component-sidenav')
      if (!sidenav) {
        return
      }
      // set opacity to 0 first, then after populating the sidebar, set it to 1
      for (let i = 0; i < x.length; i ++) {
        const heading = x[i] as HTMLElement
        // if heading's slug === "footnote-label" then skip
        if (heading.id === 'footnote-label') {
          continue
        }
        const a = document.createElement('a')
        a.href = `#${heading.id}`
        a.innerHTML = heading.innerHTML
        a.style.paddingLeft = `${heading.tagName === 'H2' ? 0.75 : 1.5}rem`
        sidenav.appendChild(a)
      }
      sidenav.style.opacity = '1'
    },
    { once: false },
  )

  window.addEventListener('scroll', updateScrollPosition)

  function getCoords(elem: HTMLElement) {
    const box = elem.getBoundingClientRect();
    const top = box.top + window.scrollY;
    return Math.round(top);
  }

  function updateHeaderPositions() {
    const headingsQueryResult = document.querySelectorAll('#content > h2, #content > h3')
    headings = (Array.from(headingsQueryResult) as HTMLElement[]).map((heading: HTMLElement) => {
      return {
        top: getCoords(heading),
        id: heading.id,
        element: heading,
      }
    })
  }

  function updateScrollPosition() {
    if (!headings.length) {
      return
    }
    // get --height-navbar from root
    const navbarHeight = parseInt(getComputedStyle(document.documentElement).getPropertyValue('--height-navbar'))
    const rootFontSize = parseFloat(getComputedStyle(document.documentElement).fontSize)
    // figure out which header is currently active
    let i
    for (i = 0; i < headings.length; i ++) {
      if (window.scrollY <= headings[i].top - ((navbarHeight + 1) * rootFontSize + 1)) {
        i = Math.max(i - 1, 0)
        break
      }
    }
    if (i === headings.length) {
      i = headings.length - 1
    }
    // check if the header is already active
    if (document.querySelector(`#component-sidenav > a[href="#${headings[i].id}"]`)?.classList.contains('active')) {
      return
    }
    // if not, deactivate the one with active class

    const activeHeaders = document.querySelectorAll('#component-sidenav .active');
    (Array.from(activeHeaders) as HTMLElement[]).forEach((header: HTMLElement) => {
      header.classList.remove('active')
    })
    // and activate the new one
    document.querySelector(`#component-sidenav > a[href="#${headings[i].id}"]`)?.classList.add('active')
  }
</script>

<nav id="component-sidenav" class="font-heading">
  <a href="#top">{title}</a>
  <!-- more children are added via script -->
</nav>