---
type Heading = {
  depth: number;
  slug: string;
  text: string;
};
const { title, headings } = Astro.props;
---

<style lang="scss">
  nav > a {
    --color-item: color-mix(in srgb, var(--color-heading), rgba(0, 0, 0, 0) 30%);
    &.active {
      --color-item: var(--color-secondary);
    }
  }
  nav > a {
    padding: 0.12rem 0;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    display: block;
    color: var(--color-item);
    // border-left: 1px solid var(--color-item);
    transition: color 0.1s;
    filter: none;
    position: relative;
    &:not(.active):hover {
      --color-item: var(--color-heading);
    }
    &:not(:first-child)::before {
      content: '';
      position: absolute;
      width: 1px;
      height: 100%;
      left: 0;
      top: 0;
      background-color: var(--color-item);
      transition: width 0.1s;
    }
    &.active::before {
      width: 4px;
    }
  }
  nav > a:first-child {
    color: var(--color-secondary);
  }
</style>

<script>

  type HeadingPosition = {
    top: number;
    id: string;
    element: HTMLElement;
  }
  let headings: HeadingPosition[] = []

  document.addEventListener(
    'astro:page-load',
    () => {
      setTimeout(() => {
        updateHeaderPositions()
        updateScrollPosition()
      }, 1000)
    },
    { once: false },
  )

  window.addEventListener('scroll', updateScrollPosition)

  function getCoords(elem: HTMLElement) {
    const box = elem.getBoundingClientRect();
    const top = box.top + window.scrollY;
    return Math.round(top);
  }

  function updateHeaderPositions() {
    const headingsQueryResult = document.querySelectorAll('#content > h2, #content > h3')
    headings = (Array.from(headingsQueryResult) as HTMLElement[]).map((heading: HTMLElement) => {
      return {
        top: getCoords(heading),
        id: heading.id,
        element: heading,
      }
    })
  }

  function updateScrollPosition() {
    // figure out which header is currently active
    let i
    for (i = 0; i < headings.length; i ++) {
      if (window.scrollY < headings[i].top - 40) {
        i = Math.max(i - 1, 0)
        break
      }
    }
    if (i === headings.length) {
      i = headings.length - 1
    }
    // check if the header is already active
    if (document.querySelector(`nav > a[href="#${headings[i].id}"]`)?.classList.contains('active')) {
      return
    }
    // if not, deactivate the one with active class

    const activeHeaders = document.querySelectorAll('.active');
    (Array.from(activeHeaders) as HTMLElement[]).forEach((header: HTMLElement) => {
      header.classList.remove('active')
    })
    // and activate the new one
    document.querySelector(`nav > a[href="#${headings[i].id}"]`)?.classList.add('active')
  }
</script>

<nav class="font-heading">
  <a href="#top">{title}</a>
  {headings.map((heading: Heading, i: number) => {
    return(
      <a
        href={`#${heading.slug}`}
        aria-label="url"
        style={{
          paddingLeft: `${heading.depth * 0.5}rem`,
        }}
      >
        {heading.text}
      </a>
    )
  })}
  <!-- <div ref={refDot} className={styles.dot} /> -->
</nav>