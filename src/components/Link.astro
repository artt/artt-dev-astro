---
// Custom element to render a link
// Need to move the language logic to client side since we need to access localStorage
// Current understanding is that the script is run only once per page load

interface Props {
  href: string;
  class?: string;
}

let { href, class: className, ...rest } = Astro.props;

// active is used in header
// putting this in the script tag will force the script to rerun when it's reloaded
// which will cause a flash
// we don't want that
const pathname = Astro.url.pathname
const isActive = pathname.startsWith(href) || pathname.startsWith(`/en${href}`)

const extraAttributes: { 'data-type'?: string, 'target'?: string, 'rel'?: string } = {}
if (href.startsWith("http")) {
  extraAttributes['data-type'] = "external"
  extraAttributes.target = "_blank"
  extraAttributes.rel = "noopener noreferrer"
}
else {
  extraAttributes['data-type'] = "internal"
}


---
<script>
  import { getLink, getPreferredLang } from '@/scripts/lang'
  document.addEventListener('astro:page-load', () => {
    const linkElements = document.querySelectorAll('a[data-type="internal"]') as NodeListOf<HTMLAnchorElement>
    // loop over link elements
    linkElements.forEach(linkElement => {
      // if link is internal, add /en to the href if preferred language is English
      linkElement.href = getLink(linkElement.pathname, getPreferredLang())
    })
  })
</script>
<a href={href} class:list={[className, {active: isActive}]} {...rest} {...extraAttributes}><slot /></a>
