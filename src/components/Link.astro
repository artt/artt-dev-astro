---
// Custom element to render a link
// Could include target="_blank" rel="noopener noreferrer" for external links,
// or bilingual support for links

interface Props {
  href: string;
  class?: string;
}

let { href, class: className, ...rest } = Astro.props;

let otherAttributes = {}
let isActive = false

// if link is external, then add target="_blank" and rel="noopener noreferrer"
if (href.startsWith("http")) {
  otherAttributes = {
    target: "_blank",
    rel: "noopener noreferrer"
  }
}
else {

  // if href includes trailing slash, remove it
  href = href === "/" ? href : href.replace(/\/$/, '');

  // determine if the link is active by URL

  const pathname = Astro.url.pathname
  isActive = pathname.startsWith(href) || pathname.startsWith(`/en${href}`)

}

---
<a href={href} class:list={[className, {active: isActive}]} {...rest} {...otherAttributes}><slot /></a>